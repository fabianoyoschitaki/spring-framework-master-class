What are the beans?
What are the dependencies of a bean?
Where to search for beans? => No need as SpringBootApplication scans package and subs

@Component (beans)
@Autowired (dependency)
@Primary (disambiguous component)

Older versions of Spring:
Setter Injection -> if dependency is optional
Constructor Injection -> if dependency is mandatory

You don't need a setter with the @Autowired, the value is set by reflection.

23 - Complex Scope Scenarios of a Spring Bean - Mix Prototype and Singleton
	if PersonDAO is singleton and has JdbcConnection is prototype as dependency, the same jdbcConnection object will be returned. 
	So you have to create a proxy
	@Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode=ScopedProxyMode.TARGET_CLASS)

24 - Difference between Spring Singleton and GOF Singleton
	GOF - 1 instance per JVM, even if multiple applications are running in the same JVM, the same instance would be returned. 
	Spring - 1 instance per application context. If there are 5 application contexts in the same JVM, 5 different instances.
	
25 - Using Component Scan to scan for beans
	if you application is com.test, every sub package will be scanned for components.
	But if you have components say in com.abc, you have to add in the spring application:
	@ComponentScan("com.abc")
	
26 - Lifecycle of a Bean @PostConstruct and @PreDestroy (callback methods)
	when put @Component, the lifecycle of a bean is going to be managed by the spring IOC container.
	if you want to do certain things before being destroyed or after it was created;
	One of the first things that the IOC container does is autowire the dependencies. Then, call 
	@PostConstruct method after that. The @PreDestroy is similar, but it happens when the instance
	is in the process of being removed by the container. 

27 - Container and Dependency Injection (CDI)
	Java EE Dependency Injection Standard (JSR 330)
	Spring supports most annotations:
		@Inject (@Autowired)
		@Named (@Component & @Qualifier)
		@Singleton (defined a scope of Singleton)
	Similar to JPA and Hibernate, interface and implementation, CDI defines how to do dependency injection. 
	In order to use CDI, add to pom.xml, below spring-boot-starter:
	<dependency>
		<groupId>javax.inject</groupId>
		<artifactId>javax.inject</artifactId>
		<version>1</version>
	</dependency>
	
	When use CDI annotations or Spring annotations? CDI is a Java EE standard. You'd always stick to a standard, 
	like JPA instead of Hibernate. There's actually no good reasons why use one over each other... :P 
	Btw CDI offers really good flexibility tomorrow if you want to switch away from Spring as Dependency Injection Framework.
	
28 - Ignore SLF4J Errors in Step 19 - We will fix them in Step 20 
	As we start removing Spring Boot and bringing in Spring core in the next step, you would see
	
	A few SLF4J errors.
	Logging does not work
	Do not worry about them. We will fix them in Step 20.